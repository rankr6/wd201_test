name: CI/CD
# Triggers the workflow on every push events
on: push

# Environment variables

env:
  PG_DATABASE: "todo-prod"
  PG_USER: "postgres"
  PG_PASSWORD: "rank"

# Jobs
jobs:
  # Job to run tests
  run-tests:
    # Runs on Ubuntu latest version
    runs-on: ubuntu-latest
    # Define a PostgreSQL service for running tests
    services:
      postgres:
        image: postgres:11.7
        env:
          POSTGRES_USER: "postgres"
          POSTGRES_PASSWORD: "ravi"
          POSTGRES_DB: "wd-todo-test"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    # Steps to execute within the job
    steps:
      # Check out repository code
      - name: Check out repository code
        uses: actions/checkout@v3

        # Install dependencies
      - name: Install dependencies
        run: npm ci
      # Run unit tests
      - name: Run unit tests
        run: npm test
      # Run the app
      - name: Run the app
        id: run-app
        run: |
          npx sequelize-cli db:drop
          npx sequelize-cli db:create
          npx sequelize-cli db:migrate
          PORT=3000 npm start &
          sleep 5
      # Run integration tests
      - name: Run integration tests
        run: |
          npm install cypress cypress-json-results
          npx cypress run

      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: npm ci
      - name: Build Docker image
        run: docker-compose build
      - name: Run Docker Compose
        run: docker-compose up -d & sleep 5
      - name: Run unit tests
        run: docker-compose run app npm test
      - name: Run the app
        run: |
          docker-compose run app npx sequelize-cli db:drop
          docker-compose run app npx sequelize-cli db:create
          docker-compose run app npx sequelize-cli db:migrate
          docker-compose run app npm run start:dev &
          sleep 5
          

      - name: Run integration tests
        run: |
          docker-compose run app npm install cypress cypress-json-results
          docker-compose run app npx cypress run --env STUDENT_SUBMISSION_URL="http://localhost:3000/"
          
      - name: Notify on success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"✨ Congratulations! The CI & CD pipeline ran successfully. All tests passed without any issues. :tada:"}' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on failure
        if: failure()
        run: |  
          curl -X POST -H 'Content-type: application/json' --data '{"text":"⚠️ Oops! The CI & CD pipeline encountered errors and failed. Immediate attention is required. :warning:"}' ${{ secrets.SLACK_WEBHOOK_URL }}
